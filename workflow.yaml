%YAML 1.1
---
gfVersion: v3.0
class: workflow

# metadata
name: HISAT2 StringTie Workflow
description: RNAseq workflow using HISAT2 and StringTie
git: https://github.com/geneflow-workflows/hisat2-stringtie-gf3
version: '0.1'

publish:
- build
- align

# inputs
inputs:
  reads:
    description: Input directory containing FASTQ files
    default: ./data/reads
  gtf:
    description: GTF file describing transcriptome
    default: ./data/gtf/sample.gtf
  reference:
    description: Reference sequence FASTA file
    default: ./data/reference/sample.fa

# parameters
parameters: 
  threads:
    description: Number of CPU threads for alignment
    default: 2

# apps
apps:
  hisat2_build:
    inputs:
      reference:
    parameters:
      output:
    images:
      hisat2_docker: quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3
    execution:
      pre:
      - run: mkdir -p ${OUTPUT_FULL}
      - run: mkdir -p ${LOG_FULL}
      methods:
      - name: docker
        if:
        - in_path: docker
        commands:
        - type: docker
          image: hisat2_docker
          run: >-
            hisat2-build ^${REFERENCE_FULL} ^${OUTPUT_FULL}/${OUTPUT_BASE}
            > ${LOG_FULL}/${OUTPUT_BASE}-hisat2-build.stdout
            2> ${LOG_FULL}/${OUTPUT_BASE}-hisat2-build.stderr

  hisat2_align:
    inputs:
      input:
      pair:
      reference:
        post:
        - run: INDEX_FILE=$(ls ${REFERENCE_FULL} | grep '.1.ht2$')
        - if:
          - not_defined: ${INDEX_FILE}
          run: fail 'Invalid reference index'
        - run: INDEX_PREFIX=\"${INDEX_FILE%.1.*}\"
    parameters:
      threads:
      output:
    images:
      hisat2_docker: quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3
    execution:
      pre:
      - run: mkdir -p ${LOG_FULL}
      methods:
      - name: docker
        if: 
        - in_path: docker
        commands:
        - run: echo ${REFERENCE_FULL}/${INDEX_PREFIX}
        - type: docker
          image: hisat2_docker
          run: >-
            hisat2 -x ^${REFERENCE_FULL}/${INDEX_PREFIX} -p ${THREADS} -1 ^${INPUT} -2 ^${PAIR} 
            > ${OUTPUT_FULL}
            2> ${LOG_FULL}/${OUTPUT_BASE}-hisat2-align.stderr

  bam_sort:
    inputs:
      input:
    parameters:
      sort_order:
        default: coordinate
      output:
    images:
      samtools_docker: quay.io/biocontainers/samtools:1.10--h2e538c0_3
    execution:
      pre:
      - run: mkdir -p ${LOG_FULL}
      methods:
      - name: docker
        if:
        - in_path: docker
        commands:
        - if:
          - str_equal: ['${SORT_ORDER}', 'queryname']
          type: docker
          image: samtools_docker
          run: samtools sort ^${INPUT} -n > ${OUTPUT_FULL} 2> ${LOG_FULL}/${OUTPUT_BASE}-samtools-sort.stderr
          else: 
          - type: docker
            image: samtools_docker
            run: samtools sort ^${INPUT} > ${OUTPUT_FULL} 2> ${LOG_FULL}/${OUTPUT_BASE}-samtools-sort.stderr

  stringtie:
     inputs:
       bam:
       gtf:
     parameters:
       output:
     images:
       stringtie_docker: quay.io/biocontainers/stringtie:2.1.6--h978d192_0
     execution:
       pre:
       - run: mkdir -p ${OUTPUT_FULL}
       - run: mkdir -p ${LOG_FULL}
       methods:
       - name: docker
         if:
         - in_path: docker
         commands:
         - type: docker
           image: stringtie_docker
           run: >-
             stringtie -G ^${GTF} --rf -e -B -o ^${OUTPUT_FULL}/${OUTPUT_BASE}_final_transcript.gtf
             -A ^${OUTPUT_FULL}/${OUTPUT_BASE}.tsv -C ^${OUTPUT_FULL}/${OUTPUT_BASE}_final_reference.gtf ^${BAM} 
             > ${LOG_FULL}/${OUTPUT_BASE}-stringtie.stdout
             2> ${LOG_FULL}/${OUTPUT_BASE}-stringtie.stderr

# steps
steps:
  build:
    app: hisat2_build
    depend: []
    template:
      reference: ${workflow->reference}
      output: reference

  align:
    app: hisat2_align
    depend: [ "build" ]
    map:
      uri: ${workflow->reads}
      regex: (.*)_(R|)1(.*)\.((fastq|fq)(|\.gz))$
    template:
      input: ${workflow->reads}/${1}_${2}1${3}.${4}
      pair: ${workflow->reads}/${1}_${2}2${3}.${4}
      reference: ${build->output}/reference
      threads: ${workflow->threads}
      output: ${1}.sam

  sort:
    app: bam_sort
    depend: [ "align" ]
    map:
      uri: ${align->output}
      regex: (.*).sam
    template:
      input: ${align->output}/${1}.sam
      output: ${1}.bam

  quantify:
    app: stringtie
    depend: [ "sort" ]
    map:
      uri: ${sort->output}
      regex: (.*).bam
    template:
      bam: ${sort->output}/${1}.bam
      gtf: ${workflow->gtf}
      output: ${1}
    publish: true
...
